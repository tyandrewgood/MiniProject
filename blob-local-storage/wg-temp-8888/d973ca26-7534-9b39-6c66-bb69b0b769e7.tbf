{"rootHash":"#01312e721910a19f4734e64e959bd5fe8ae91ac3","projectId":"guest+MiniProject","kind":"EmptyProject","branchName":"master","commitHash":"#27d55c25f1f3d568ecaf7412f1028255435cf361","hashes":{"objects":["#01312e721910a19f4734e64e959bd5fe8ae91ac3","#85e2fdedc64e4343da907aa1a4460e1698da2dc8","#1bb69d9a9fdb689344f65ae768311bcbe1ac4112","#145e218cf0662f8882a6e58c151c43298a71f0d6","#dad36ece7929bfb87411c3d111fe8d58467a4b80","#43bf56ac28dab1828c0c4008363914c7cdde427b","#c390e598e9b75c92fdd0f71d4c097b7772fc687a","#dc9a7d633c67e82bebd141801f55a3be5eb09096","#01833892d17a3fe32e265c0b416a6de370519921","#058ddf5019ffb5738095e39c7def1adc36a8bcf6","#b9be88d6bb72a99c6cbb4e350f92d1f6c1bf41d3","#947ea542aeaf0265d7f00b1f210f15295360c1fd","#14258a58a72732eeb3d8d0c4148fb570d1d0cd0d","#061b07bf9d1f5542254b07719e3b39bde28a83a4","#c22e21984d9d2b5a770ac4d598e0b5cb81413b05","#c3ea02e4d5336e53648d5a212595f88303ba1ce0","#e23ebcc105a9428b7e1445e6398f910c42159ca5","#d87c2e18881e6f8966f9cc9e934eed5d863e8ef0","#520d2f73ce330f7e3b32c53c408f4bce6026741b","#38fd7fde1f01f0fafcc3d71444ee9f2d9e84d8d6","#4f3916c2a162aab0d77b5ae5302dcadc29ecdac6","#4b68803f19e3f3ce304ba8eaf136c83b9eefa56f","#d5f9ea6b7f7c1d0b669477872e3c2ac8af22eccd","#dfaf042c9eef874f4c170395c6ca0a46d278c2ae","#d7cbe21dce6dadc907bfba3a4a678f5f4b3b874b","#92b9e548f7cdd410d525f07d3a9e97ad3dd89170","#27c2474d51d022d235a2a9f10a3803b08dc7e79e","#cdaf3dcd4ce4b2dfb30927f917aa18a59b23c12c","#2cd3cee07d45bd3d7c58236f5c048997d142b705","#58e01619d4071953be3943c5da875676c71a57e3","#83539d64d9699d531315c67b849a499e1d9546e2"],"assets":[]},"objects":[{"1":"#85e2fdedc64e4343da907aa1a4460e1698da2dc8","_id":"#01312e721910a19f4734e64e959bd5fe8ae91ac3","_nullptr":{"atr":{"name":"_null_pointer"}},"ovr":{"":{"base":"/_nullptr"},"/_sets/MetaAspectSet/1133782405":{"member":"/1"},"/_sets/MetaAspectSet_68f8146d-b1b7-6c40-3464-f8c070e97e8d/125899614":{"member":"/1"},"/_meta/children/_sets/items/302362349":{"member":"/1"},"/s":{"base":"/1"},"/_sets/MetaAspectSet_68f8146d-b1b7-6c40-3464-f8c070e97e8d/anpzCY":{"member":"/s"},"/_sets/MetaAspectSet/ZP0qXQ":{"member":"/s"},"/s/_meta/children/_sets/items/WYEENt":{"member":"/1"},"/_sets/MetaAspectSet_ddcc99bb-122e-64cb-5491-df018d202c20/sq5vB9":{"member":"/s/q"},"/_sets/MetaAspectSet/dQmhkG":{"member":"/s/q"},"/_sets/MetaAspectSet_ddcc99bb-122e-64cb-5491-df018d202c20/N0Qd1B":{"member":"/s/4"},"/_sets/MetaAspectSet/IkL4Fy":{"member":"/s/4"},"/_sets/MetaAspectSet_ddcc99bb-122e-64cb-5491-df018d202c20/4tQdmT":{"member":"/s/U"},"/_sets/MetaAspectSet/0u9R0Y":{"member":"/s/U"},"/_sets/MetaAspectSet_ddcc99bb-122e-64cb-5491-df018d202c20/IMgDg3":{"member":"/s/Ku"},"/_sets/MetaAspectSet/h5qO3R":{"member":"/s/Ku"},"/_sets/MetaAspectSet_ddcc99bb-122e-64cb-5491-df018d202c20/JUmxDl":{"member":"/s/G"},"/_sets/MetaAspectSet/yRhFg2":{"member":"/s/G"},"/_sets/MetaAspectSet_ddcc99bb-122e-64cb-5491-df018d202c20/IKVKPs":{"member":"/s/E"},"/_sets/MetaAspectSet/UxYkiu":{"member":"/s/E"},"/s/U":{"base":"/1"},"/s/4":{"base":"/1"},"/s/q":{"base":"/1"},"/s/Ku":{"base":"/1"},"/M":{"base":"/s/q"},"/M/k":{"base":"/s/4"},"/M/0":{"base":"/s/4"},"/M/w":{"base":"/s/4"},"/M/s":{"base":"/s/U"},"/M/n":{"base":"/s/G"},"/M/9":{"base":"/s/G"},"/M/p":{"base":"/s/E"},"/m":{"base":"/s/q"},"/m/X":{"base":"/s/4"},"/m/q":{"base":"/s/U"},"/m/5":{"base":"/s/4"},"/m/A":{"base":"/s/E"},"/m/d":{"base":"/s/U"},"/m/P":{"base":"/s/4"},"/m/J":{"base":"/s/E"},"/m/R":{"base":"/s/U"},"/m/Z":{"base":"/s/G"},"/m/a":{"base":"/s/4"},"/m/b":{"base":"/s/E"},"/m/h":{"base":"/s/G"},"/m/k":{"base":"/s/G"}},"atr":{"_relguid":"03d360729e097866cb4ed0a36ff825f6","name":"ROOT"},"reg":{"MetaSheets":[{"SetID":"MetaAspectSet_68f8146d-b1b7-6c40-3464-f8c070e97e8d","order":0,"title":"META"},{"SetID":"MetaAspectSet_ddcc99bb-122e-64cb-5491-df018d202c20","order":1,"title":"PetriNet"}],"ProjectRegistry":{"FCO_ID":"/1"},"_sets_":57},"_sets":{"MetaAspectSet":{"1133782405":{"reg":{"_":"_","position":{"x":100,"y":100}}},"reg":{"_":"_"},"ZP0qXQ":{"reg":{"_":"_","position":{"x":345,"y":162}}},"dQmhkG":{"reg":{"_":"_","position":{"x":445,"y":106}}},"IkL4Fy":{"reg":{"_":"_","position":{"x":210,"y":180}}},"0u9R0Y":{"reg":{"_":"_","position":{"x":485,"y":213}}},"h5qO3R":{"reg":{"_":"_","position":{"x":786,"y":206}}},"yRhFg2":{"reg":{"_":"_","position":{"x":647,"y":368}}},"UxYkiu":{"reg":{"_":"_","position":{"x":859,"y":402}}}},"_nullptr":{"atr":{"name":"_null_pointer"}},"ovr":{"":{"MetaAspectSet":"/_nullptr","MetaAspectSet_68f8146d-b1b7-6c40-3464-f8c070e97e8d":"/_nullptr","MetaAspectSet_ddcc99bb-122e-64cb-5491-df018d202c20":"/_nullptr"}},"MetaAspectSet_68f8146d-b1b7-6c40-3464-f8c070e97e8d":{"125899614":{"reg":{"_":"_","position":{"x":100,"y":100}}},"reg":{"_":"_"},"anpzCY":{"reg":{"_":"_","position":{"x":395,"y":230}}}},"MetaAspectSet_ddcc99bb-122e-64cb-5491-df018d202c20":{"reg":{"_":"_"},"sq5vB9":{"reg":{"_":"_","position":{"x":435,"y":44}}},"N0Qd1B":{"reg":{"_":"_","position":{"x":168,"y":188}}},"4tQdmT":{"reg":{"_":"_","position":{"x":448,"y":195}}},"IMgDg3":{"reg":{"_":"_","position":{"x":739,"y":189}}},"JUmxDl":{"reg":{"_":"_","position":{"x":427,"y":429}}},"IKVKPs":{"reg":{"_":"_","position":{"x":630,"y":427}}}}},"_meta":{"atr":{"name":{"type":"string"}},"children":{"_sets":{"items":{"302362349":{"reg":{"_":"_"},"atr":{"min":-1,"max":-1}},"reg":{"_":"_"}},"_nullptr":{"atr":{"name":"_null_pointer"}},"ovr":{"":{"items":"/_nullptr"}}},"reg":{"_sets_":4}}},"__v":"1.2.0","s":"#1bb69d9a9fdb689344f65ae768311bcbe1ac4112","M":"#145e218cf0662f8882a6e58c151c43298a71f0d6","m":"#dad36ece7929bfb87411c3d111fe8d58467a4b80"},{"_id":"#85e2fdedc64e4343da907aa1a4460e1698da2dc8","_nullptr":{"atr":{"name":"_null_pointer"}},"ovr":{"":{"base":"/_nullptr"}},"atr":{"_relguid":"de5a7e097ce3914f3d834f0c20e7e5b3","name":"FCO"},"reg":{"DisplayFormat":"$name","position":{"x":80,"y":70}},"_meta":{"atr":{"name":{"type":"string"}}},"__v":"1.2.0","_minlenrelid":3},{"4":"#43bf56ac28dab1828c0c4008363914c7cdde427b","_id":"#1bb69d9a9fdb689344f65ae768311bcbe1ac4112","atr":{"_relguid":"f792c0cfc60be18b387fcf8082622f63","name":"Meta"},"reg":{"position":{"x":82,"y":187}},"__v":"1.2.0","_meta":{"children":{"_sets":{"_nullptr":{"atr":{"name":"_null_pointer"},"_hasownrelation":true},"ovr":{"":{"items":"/_nullptr"}},"_hasownrelation":true,"items":{"reg":{"_":"_"},"WYEENt":{"_hasownrelation":true,"reg":{"_":"_"},"atr":{"min":-1,"max":-1}}}},"reg":{"_sets_":4}}},"E":"#c390e598e9b75c92fdd0f71d4c097b7772fc687a","G":"#dc9a7d633c67e82bebd141801f55a3be5eb09096","U":"#01833892d17a3fe32e265c0b416a6de370519921","q":"#058ddf5019ffb5738095e39c7def1adc36a8bcf6","Ku":"#b9be88d6bb72a99c6cbb4e350f92d1f6c1bf41d3","ovr":{"/E/_meta/_p_src/_sets/items/Gxp2ZL":{"member":"/U"},"/G/_meta/_p_dst/_sets/items/v3FMnR":{"member":"/U"},"/E/_meta/_p_dst/_sets/items/8jwgc5":{"member":"/4"},"/G/_meta/_p_src/_sets/items/nZzfKI":{"member":"/4"},"/q/_meta/children/_sets/items/2Eulml":{"member":"/U"},"/q/_meta/children/_sets/items/s5uQzm":{"member":"/4"},"/q/_meta/children/_sets/items/6xdmmn":{"member":"/Ku"},"/E":{"base":"/Ku"},"/G":{"base":"/Ku"}}},{"0":"#947ea542aeaf0265d7f00b1f210f15295360c1fd","9":"#14258a58a72732eeb3d8d0c4148fb570d1d0cd0d","_id":"#145e218cf0662f8882a6e58c151c43298a71f0d6","atr":{"_relguid":"c832cbce4dbb9c0c870f3eb830f5d937","name":"PetriNetExample","pythonCode":"class PythonPlugin(PluginBase):\n  def main(self):\n    active_node = self.active_node\n    core = self.core\n    logger = self.logger\n    logger.debug('path: {0}'.format(core.get_path(active_node)))\n    logger.info('name: {0}'.format(core.get_attribute(active_node, 'name')))\n    logger.warn('pos : {0}'.format(core.get_registry(active_node, 'position')))\n    logger.error('guid: {0}'.format(core.get_guid(active_node)))\n    \n    \n    \n    \"\"\"\n    freeChoice = false\n    stateMachine = false\n    markedGraph = false\n    workFlow = false\n    \"\"\"\n    \n    self.namespace = None\n    META = self.META\n    \n    nodes = core.load_sub_tree(active_node)\n    logger.info(nodes)\n    \n    places = []\n    transitions = []\n    inPlace = []\n    outPlace = []\n    for node in nodes:\n      if core.is_type_of(node, META['Place']):\n        places_data = {'name':core.get_attribute(node, 'name')}\n        places.append(places_data)\n      elif core.is_type_of(node, META['Transition']):\n        transition_data = {'name':core.get_attribute(node, 'name')}\n        transitions.append(transition_data)\n        \n       \n    logger.info(places)\n    logger.info(transitions)"},"reg":{"position":{"x":467,"y":150},"icore-python-modules":""},"__v":"1.2.0","k":"#061b07bf9d1f5542254b07719e3b39bde28a83a4","w":"#c22e21984d9d2b5a770ac4d598e0b5cb81413b05","s":"#c3ea02e4d5336e53648d5a212595f88303ba1ce0","n":"#e23ebcc105a9428b7e1445e6398f910c42159ca5","ovr":{"/n":{"src":"/k","dst":"/s"},"/9":{"src":"/0","dst":"/s"},"/p":{"src":"/s","dst":"/w"}},"p":"#d87c2e18881e6f8966f9cc9e934eed5d863e8ef0"},{"5":"#520d2f73ce330f7e3b32c53c408f4bce6026741b","_id":"#dad36ece7929bfb87411c3d111fe8d58467a4b80","atr":{"_relguid":"0d16424ed86c93147389a09dd28fb2d1","name":"StateMachineExample","pythonCode":"class PythonPlugin(PluginBase):\n  def main(self):\n    active_node = self.active_node\n    core = self.core\n    logger = self.logger\n    logger.debug('path: {0}'.format(core.get_path(active_node)))\n    logger.info('name: {0}'.format(core.get_attribute(active_node, 'name')))\n    logger.warn('pos : {0}'.format(core.get_registry(active_node, 'position')))\n    logger.error('guid: {0}'.format(core.get_guid(active_node)))\n\n       \n    self.namespace = None\n    META = self.META\n    \n    nodes = core.load_sub_tree(active_node)\n    #logger.info(nodes)\n    \n    places = []\n    transitions = []\n    inPlaces = []\n    outPlaces = []\n    vals = {}\n    \n    inPlaceSet = []\n    \n    #Populate vals so every unique Id corresponds to there actual name\n    for node in nodes:\n      vals[core.get_path(node)] = core.get_attribute(node, 'name')\n    \n    \n    connections = []\n    \n    for node in nodes:\n      if core.is_type_of(node, META['Place']):\n        #places_data = {'name':core.get_attribute(node, 'name')}\n        #places.append(places_data)\n        places.append(core.get_attribute(node, 'name'))\n      elif core.is_type_of(node, META['Transition']):\n        #transition_data = {'name':core.get_attribute(node, 'name')}\n        #transitions.append(transition_data) \n        transitions.append(core.get_attribute(node, 'name'))\n      elif core.is_type_of(node, META['InPlace']):\n        srcID = core.get_pointer_path(node, 'src')\n        src = vals.get(srcID)\n        dstId = core.get_pointer_path(node, 'dst')\n        dst = vals.get(dstId)\n        inPlace_data = {'name': core.get_attribute(node, 'name'), 'src': src, 'dst': dst}\n        inPlaces.append(inPlace_data)\n        connections.append((src, dst))\n      elif core.is_type_of(node, META['OutPlace']):\n        srcID = core.get_pointer_path(node, 'src')\n        src = vals.get(srcID)\n        dstId = core.get_pointer_path(node, 'dst')\n        dst = vals.get(dstId)\n        outPlace_data = {'name': core.get_attribute(node, 'name'), 'src': src, 'dst': dst}\n        outPlaces.append(outPlace_data)\n        connections.append((src, dst))\n   \n    logger.info(connections)\n    parts = []\n    for place in places:\n      parts.append(place)\n    for transition in transitions:\n      parts.append(transition)\n    \n    logger.info(parts)\n      \n    # We traverse through and check for any duplicates\n    # We also know that every transition should have one in and one out, therefore we say they should be equal\n    # We know any other case will result in not a state machine   \n    def stateMachine(inPlaces, outPlaces, transitions):\n      countIn = []\n      for inPlace in inPlaces:\n        srcIn = inPlace.get('src')\n        dstIn = inPlace.get('dst')    \n        if srcIn in transitions:\n          if srcIn not in countIn:\n            countIn.append(srcIn)\n          else:\n            return False\n          \n        if dstIn in transitions:\n          if dstIn not in countIn:\n            countIn.append(dstIn)\n          else:\n            return False\n      countOut = []  \n      for outPlace in outPlaces:\n        srcOut = outPlace.get('src')\n        dstOut = outPlace.get('dst')\n        if srcOut in transitions:\n          if srcOut not in countOut:\n            countOut.append(srcOut)\n          else:\n            return False\n        if dstOut in transitions:\n          if dstOut not in countOut:\n            countOut.append(dstOut)\n          else:\n            return False\n   \n      return countIn == countOut\n      \n    # We traverse through and check for any duplicates\n    # We also know that every place should have one in and one out, therefore we say they should be equal\n    # We know any other case will result in not a marked graph\n    def markedGraph(inPlaces, outPlaces, transitions):\n      countIn = []\n      for inPlace in inPlaces:\n        srcIn = inPlace.get('src')\n        dstIn = inPlace.get('dst')        \n        if srcIn in places:\n          if srcIn not in countIn:\n            countIn.append(srcIn)\n          else:\n            return False\n          \n        if dstIn in places:\n          if dstIn not in countIn:\n            countIn.append(dstIn)\n          else:\n            return False\n      countOut = []  \n      for outPlace in outPlaces:\n        srcOut = outPlace.get('src')\n        dstOut = outPlace.get('dst')\n        if srcOut in places:\n          if srcOut not in countOut:\n            countOut.append(srcOut)\n          else:\n            return False\n        if dstOut in places:\n          if dstOut not in countOut:\n            countOut.append(dstOut)\n          else:\n            return False\n      \n \n      return countIn == countOut\n      #return True\n      #return len(countIn) == len(countOut)\n    \n    \n    # Free choice is defined as every transition having a unique set of inPlaces\n    # We already went and gathered the list of InPlaces\n    # Here we increment our count for each time in one is in our set\n    # If the count is equal to the length of our set, then we know it must be unique\n    def freeChoice(inPlaces):\n      count = 0\n      for inplace in inPlaces:\n        for temp in inPlaces:\n          if inplace == temp:\n            count += 1\n      return count == len(inPlaces)\n    \n    \n    # The idea:\n    # First identify that there is only one sink and one source, if this is not true, they can not all be connected or reachable\n    # Once, we have only identiifed as source, traverse the network starting at the source\n    # We then keep track of the visited items and if the sink is ever reached. \n    # The next step is checking if each item was in our visited list. If it is not, then we know it was not reachable, so we return False. \n    # The program will then return if the sink is found or not completing the check\n    def workFlow(inPlaces, outPlaces, places, transitions, parts, connections):\n      countIn = []\n      for inPlace in inPlaces:\n        srcIn = inPlace.get('src')\n        dstIn = inPlace.get('dst')        \n        if srcIn in places:\n          if srcIn not in countIn:\n            countIn.append(srcIn)\n          \n        if dstIn in places:\n          if dstIn not in countIn:\n            countIn.append(dstIn)\n\n      countOut = []  \n      for outPlace in outPlaces:\n        srcOut = outPlace.get('src')\n        dstOut = outPlace.get('dst')\n        if srcOut in places:\n          if srcOut not in countOut:\n            countOut.append(srcOut)\n \n        if dstOut in places:\n          if dstOut not in countOut:\n            countOut.append(dstOut)\n \n      \n      source = None\n      sink = None\n      sourceCount = 0\n      sinkCount = 0\n      for place in places:\n        if place not in countOut and place in countIn:\n          if sourceCount == 0:\n            source = place\n            sourceCount +=1\n          else: \n            return False\n        if place not in countIn and place in countOut:\n          if sinkCount == 0:\n            sink = place\n            sinkCount +=1\n          else:\n            return False\n            \n      visitedCount = 0\n      visited = []\n      temp = []\n      temp.append(source)\n      visited.append(source)\n      sinkVisted = False\n      while visitedCount < len(parts):\n        current = temp.pop()\n        visitedCount += 1\n        if current == sink:\n          sinkVisited = True\n        for link in connections:\n            if link[0] == current:\n              if link[1] not in visited:\n                visited.append(link[1])\n                temp.append(link[1])\n                \n                \n      for spot in parts:\n        if spot not in visited:\n          return False\n      \n      \n      return sinkVisited\n      \n    \n    #logger.info(places)\n    #logger.info(transitions)\n    #logger.info(inPlaces)\n    #logger.info(outPlaces)\n    isStateMachine = stateMachine(inPlaces, outPlaces, transitions)\n    isMarkedGraph = markedGraph(inPlaces, outPlaces, places)\n    isFreeChoice = freeChoice(inPlaces)\n    isWorkFlowNet = workFlow(inPlaces, outPlaces, places, transitions, parts, connections)\n    logger.info(isStateMachine)\n    logger.info(isMarkedGraph)\n    logger.info(isFreeChoice)\n    logger.info(isWorkFlowNet)\n    \n    \n \n \n       \n "},"reg":{"position":{"x":439,"y":376},"icore-python-modules":""},"__v":"1.2.0","X":"#38fd7fde1f01f0fafcc3d71444ee9f2d9e84d8d6","q":"#4f3916c2a162aab0d77b5ae5302dcadc29ecdac6","ovr":{"/A":{"src":"/q","dst":"/5"},"/J":{"src":"/d","dst":"/P"},"/Z":{"src":"/P","dst":"/R"},"/b":{"src":"/R","dst":"/a"},"/h":{"src":"/X","dst":"/q"},"/k":{"src":"/5","dst":"/d"}},"A":"#4b68803f19e3f3ce304ba8eaf136c83b9eefa56f","d":"#d5f9ea6b7f7c1d0b669477872e3c2ac8af22eccd","P":"#dfaf042c9eef874f4c170395c6ca0a46d278c2ae","J":"#d7cbe21dce6dadc907bfba3a4a678f5f4b3b874b","R":"#92b9e548f7cdd410d525f07d3a9e97ad3dd89170","Z":"#27c2474d51d022d235a2a9f10a3803b08dc7e79e","a":"#cdaf3dcd4ce4b2dfb30927f917aa18a59b23c12c","b":"#2cd3cee07d45bd3d7c58236f5c048997d142b705","h":"#58e01619d4071953be3943c5da875676c71a57e3","k":"#83539d64d9699d531315c67b849a499e1d9546e2"},{"_id":"#43bf56ac28dab1828c0c4008363914c7cdde427b","atr":{"_relguid":"3603f77a6f6bb33b7eb3dc7cf849a2ba","name":"Place","marking":0},"reg":{"position":{"x":188,"y":227},"decorator":"SVGDecorator","SVGIcon":" \n<%\nmarking = getAttribute('marking'), \nwidth = 20,\nheight = 20\noffset = 20 \nyPosition = 20\n\n%>\n\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"70\" height=\"70\">\n    <g>\n        <circle class=\"fill-color border-color\" cx=\"35\" cy=\"35\" r=\"34\" stroke=\"#000\" fill=\"#FFFFFF\"/>\n      <%\n      \tif (marking < 13) {\n\t\t\tfor ( i = 0; i < marking; i += 1){\n            \tif (i == 4) {\n                \tyPosition += 15\n                    offset = 20\n                }\n                if (i == 8) {\n                \tyPosition += 15\n                    offset = 20\n                }\n            \t\n\t\t\t\t%><circle cx=\"<%=offset%>\" cy=\"<%=yPosition%>\" r=\"3\" stroke=\"#000\" fill=\"#FFFFF\"/><%\n\t\t\t\toffset +=10\n\t\t\t}\n\t\t} else {\n        \t%><text fill=\"#FFFFF\" x=\"35\" y=\"35\" font-family=\"monospace\" font-size=\"14\" text-anchor=\"middle\"><%=marking%></text><%\n        }\n      %>\n    </g>\n</svg>\n\n ","DisplayFormat":"$name ($marking)"},"__v":"1.2.0","_meta":{"atr":{"marking":{"type":"integer","min":0,"isPassword":false}}}},{"_id":"#c390e598e9b75c92fdd0f71d4c097b7772fc687a","atr":{"_relguid":"b92de7efbbcb4903f0a9e21a3bb568a2","name":"OutPlace"},"reg":{"position":{"x":832,"y":370},"isAbstract":false,"DisplayFormat":""},"__v":"1.2.0","_meta":{"_nullptr":{"atr":{"name":"_null_pointer"},"_hasownrelation":true},"ovr":{"":{"src":"/_nullptr","dst":"/_nullptr"}},"_hasownrelation":true,"_p_src":{"_sets":{"_nullptr":{"atr":{"name":"_null_pointer"},"_hasownrelation":true},"ovr":{"":{"items":"/_nullptr"}},"_hasownrelation":true,"items":{"reg":{"_":"_"},"Gxp2ZL":{"_hasownrelation":true,"reg":{"_":"_"},"atr":{"min":-1,"max":1}}}},"reg":{"_sets_":4},"atr":{"min":1,"max":1}},"_p_dst":{"_sets":{"_nullptr":{"atr":{"name":"_null_pointer"},"_hasownrelation":true},"ovr":{"":{"items":"/_nullptr"}},"_hasownrelation":true,"items":{"reg":{"_":"_"},"8jwgc5":{"_hasownrelation":true,"reg":{"_":"_"},"atr":{"min":-1,"max":1}}}},"reg":{"_sets_":4},"atr":{"min":1,"max":1}}},"_nullptr":{"atr":{"name":"_null_pointer"},"_hasownrelation":true},"ovr":{"":{"src":"/_nullptr","dst":"/_nullptr"}}},{"_id":"#dc9a7d633c67e82bebd141801f55a3be5eb09096","atr":{"_relguid":"fbae3439c05052b876ce9ca11dc6f495","name":"InPlace"},"reg":{"position":{"x":640,"y":374},"isAbstract":false,"DisplayFormat":""},"__v":"1.2.0","_meta":{"_nullptr":{"atr":{"name":"_null_pointer"},"_hasownrelation":true},"ovr":{"":{"src":"/_nullptr","dst":"/_nullptr"}},"_hasownrelation":true,"_p_src":{"_sets":{"_nullptr":{"atr":{"name":"_null_pointer"},"_hasownrelation":true},"ovr":{"":{"items":"/_nullptr"}},"_hasownrelation":true,"items":{"reg":{"_":"_"},"nZzfKI":{"_hasownrelation":true,"reg":{"_":"_"},"atr":{"min":-1,"max":1}}}},"reg":{"_sets_":4},"atr":{"min":1,"max":1}},"_p_dst":{"_sets":{"_nullptr":{"atr":{"name":"_null_pointer"},"_hasownrelation":true},"ovr":{"":{"items":"/_nullptr"}},"_hasownrelation":true,"items":{"reg":{"_":"_"},"v3FMnR":{"_hasownrelation":true,"reg":{"_":"_"},"atr":{"min":-1,"max":1}}}},"reg":{"_sets_":4},"atr":{"min":1,"max":1}}},"_nullptr":{"atr":{"name":"_null_pointer"},"_hasownrelation":true},"ovr":{"":{"src":"/_nullptr","dst":"/_nullptr"}}},{"_id":"#01833892d17a3fe32e265c0b416a6de370519921","atr":{"_relguid":"076143715a20a07923afcee801b59134","name":"Transition"},"reg":{"position":{"x":433,"y":227},"decorator":"SVGDecorator","SVGIcon":"<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"40\" height=\"60\">\n    <g>\n        <rect class=\"fill-color border-color\" height=\"58\" width=\"38\" x=\"1\" y=\"1\" stroke=\"#000\" fill=\"#FCFCFC\" stroke-width=\"2\"/>\n    </g>\n</svg>"},"__v":"1.2.0"},{"_id":"#058ddf5019ffb5738095e39c7def1adc36a8bcf6","atr":{"_relguid":"de08d7bd322a82bf4e98ded992e74ad5","name":"PetriNet"},"reg":{"position":{"x":396,"y":82},"decorator":"SVGDecorator","SVGIcon":"Network.svg","validPlugins":"ModelicaCodeGenerator"},"__v":"1.2.0","_meta":{"children":{"_sets":{"_nullptr":{"atr":{"name":"_null_pointer"},"_hasownrelation":true},"ovr":{"":{"items":"/_nullptr"}},"_hasownrelation":true,"items":{"reg":{"_":"_"},"s5uQzm":{"_hasownrelation":true,"reg":{"_":"_"},"atr":{"min":-1,"max":-1}},"2Eulml":{"_hasownrelation":true,"reg":{"_":"_"},"atr":{"min":-1,"max":-1}},"6xdmmn":{"_hasownrelation":true,"reg":{"_":"_"},"atr":{"min":-1,"max":-1}}}},"reg":{"_sets_":10}}},"_minlenrelid":3},{"_id":"#b9be88d6bb72a99c6cbb4e350f92d1f6c1bf41d3","atr":{"_relguid":"634d955c9cd8b56772388c159cf56557","name":"Arc"},"reg":{"position":{"x":730,"y":234},"isAbstract":true},"__v":"1.2.0"},{"_id":"#947ea542aeaf0265d7f00b1f210f15295360c1fd","atr":{"_relguid":"38add60b3c38087dcd58f48c4c694309","marking":3,"name":"Place 2"},"reg":{"position":{"x":747,"y":151}},"__v":"1.2.0"},{"_id":"#14258a58a72732eeb3d8d0c4148fb570d1d0cd0d","atr":{"_relguid":"ab849b1f71cf46d2916645c28f495df9"},"reg":{"position":{"x":605,"y":235}},"__v":"1.2.0"},{"_id":"#061b07bf9d1f5542254b07719e3b39bde28a83a4","atr":{"_relguid":"912592654e6fd043034506e07d21aaaf","marking":3,"name":"Place 1"},"reg":{"position":{"x":224,"y":137}},"__v":"1.2.0"},{"_id":"#c22e21984d9d2b5a770ac4d598e0b5cb81413b05","atr":{"_relguid":"fe505418f828b21a4cb07d27ddbedbc8","name":"Place 3"},"reg":{"position":{"x":464,"y":582}},"__v":"1.2.0"},{"_id":"#c3ea02e4d5336e53648d5a212595f88303ba1ce0","atr":{"_relguid":"742c2bb6c9da3fdeb79c639af2435d2b","name":"Transition 1"},"reg":{"position":{"x":459,"y":320}},"__v":"1.2.0"},{"_id":"#e23ebcc105a9428b7e1445e6398f910c42159ca5","atr":{"_relguid":"54564f05f1231543cfdcfc3e7e807799"},"reg":{"position":{"x":340,"y":230}},"__v":"1.2.0"},{"_id":"#d87c2e18881e6f8966f9cc9e934eed5d863e8ef0","atr":{"_relguid":"d64b7c34c705983174efad4e732e1a57"},"reg":{"position":{"x":465,"y":440}},"__v":"1.2.0"},{"_id":"#520d2f73ce330f7e3b32c53c408f4bce6026741b","atr":{"_relguid":"aeb6c2956e152ad2849f06e554608740","name":"Place 2","marking":3},"reg":{"position":{"x":515,"y":306}},"__v":"1.2.0"},{"_id":"#38fd7fde1f01f0fafcc3d71444ee9f2d9e84d8d6","atr":{"_relguid":"63b70f040e0e31ecc9542431ead37899","name":"Place 1","marking":7},"reg":{"position":{"x":122,"y":298}},"__v":"1.2.0"},{"_id":"#4f3916c2a162aab0d77b5ae5302dcadc29ecdac6","atr":{"_relguid":"33d3a239114ec9c9f602a1adc549ea41","name":"Transition 1"},"reg":{"position":{"x":341,"y":304}},"__v":"1.2.0"},{"_id":"#4b68803f19e3f3ce304ba8eaf136c83b9eefa56f","atr":{"_relguid":"e4bb27f09f9da98d95f02e02cafbea40"},"reg":{"position":{"x":430,"y":305}},"__v":"1.2.0"},{"_id":"#d5f9ea6b7f7c1d0b669477872e3c2ac8af22eccd","atr":{"_relguid":"392c06363037f0c78f401e5037a9b58a","name":"Transition 2"},"reg":{"position":{"x":683,"y":302}},"__v":"1.2.0"},{"_id":"#dfaf042c9eef874f4c170395c6ca0a46d278c2ae","atr":{"_relguid":"a3fca9fa83d506e9b550bc24ff763091","name":"Place 3"},"reg":{"position":{"x":892,"y":318}},"__v":"1.2.0"},{"_id":"#d7cbe21dce6dadc907bfba3a4a678f5f4b3b874b","atr":{"_relguid":"7e8ead08306dcecd2402409a830e6d9c"},"reg":{"position":{"x":785,"y":310}},"__v":"1.2.0"},{"_id":"#92b9e548f7cdd410d525f07d3a9e97ad3dd89170","atr":{"_relguid":"ea70dc51edd2ec2dec4f7bdb00203890","name":"Transition 3"},"reg":{"position":{"x":867,"y":480}},"__v":"1.2.0"},{"_id":"#27c2474d51d022d235a2a9f10a3803b08dc7e79e","atr":{"_relguid":"bc34005985b6eb5dcd06b23ba422f75c"},"reg":{"position":{"x":880,"y":400}},"__v":"1.2.0"},{"_id":"#cdaf3dcd4ce4b2dfb30927f917aa18a59b23c12c","atr":{"_relguid":"4170c5f0f7cded7312f21ba4649b30b5","name":"Place 4","marking":2},"reg":{"position":{"x":620,"y":507}},"__v":"1.2.0"},{"_id":"#2cd3cee07d45bd3d7c58236f5c048997d142b705","atr":{"_relguid":"92c8c0139028d98127aae32249e4e9ee"},"reg":{"position":{"x":745,"y":495}},"__v":"1.2.0"},{"_id":"#58e01619d4071953be3943c5da875676c71a57e3","atr":{"_relguid":"fc89665985f6eae7e5f7503c1c728f87"},"reg":{"position":{"x":230,"y":300}},"__v":"1.2.0"},{"_id":"#83539d64d9699d531315c67b849a499e1d9546e2","atr":{"_relguid":"6229141f3b8dc79b92bc7ffa23a06c6a"},"reg":{"position":{"x":600,"y":305}},"__v":"1.2.0"}]}